``` yaml
---

# Create the following fabrics with default configuration values
# if they don't already exist.  If they exist, the playbook will
# exit without doing anything.
# - 1. VXLAN EVPN fabric
# - 1. VXLAN EVPN Multi-Site fabric
# - 1. LAN Classic fabric

- name: Create fabrics
  cisco.dcnm.dcnm_fabric:
    state: merged
    config:
    -   FABRIC_NAME: VXLAN_Fabric
        FABRIC_TYPE: VXLAN_EVPN
        BGP_AS: 65000
    -   FABRIC_NAME: MSD_Fabric
        FABRIC_TYPE: VXLAN_EVPN_MSD
    -   FABRIC_NAME: LAN_Fabric
        FABRIC_TYPE: LAN_CLASSIC
  register: result
- debug:
    var: result

# Update the above fabrics with additional configurations.

- name: Update fabrics
  cisco.dcnm.dcnm_fabric:
    state: merged
    config:
    -   FABRIC_NAME: VXLAN_Fabric
        FABRIC_TYPE: VXLAN_EVPN
        BGP_AS: 65000
        ANYCAST_GW_MAC: 0001.aabb.ccdd
        UNDERLAY_IS_V6: false
        EXTRA_CONF_LEAF: |
          interface Ethernet1/1-16
            description managed by NDFC
        DEPLOY: false
    -   FABRIC_NAME: MSD_Fabric
        FABRIC_TYPE: VXLAN_EVPN_MSD
        LOOPBACK100_IP_RANGE: 10.22.0.0/24
        DEPLOY: false
    -   FABRIC_NAME: LAN_Fabric
        FABRIC_TYPE: LAN_CLASSIC
        BOOTSTRAP_ENABLE: false
        IS_READ_ONLY: false
        DEPLOY: false
  register: result
- debug:
    var: result

# Setting skip_validation to True to bypass parameter validation in the module.
# Note, this does not bypass parameter validation in NDFC.  skip_validation
# can be useful to verify that the dcnm_fabric module's parameter validation
# is disallowing parameter combinations that would also be disallowed by
# NDFC.

- name: Update fabrics
  cisco.dcnm.dcnm_fabric:
    state: merged
    skip_validation: True
    config:
    -   FABRIC_NAME: VXLAN_Fabric
        FABRIC_TYPE: VXLAN_EVPN
        BGP_AS: 65000
        ANYCAST_GW_MAC: 0001.aabb.ccdd
        UNDERLAY_IS_V6: false
        EXTRA_CONF_LEAF: |
          interface Ethernet1/1-16
            description managed by NDFC
        DEPLOY: false

# Use replaced state to return the fabrics to their default configurations.

- name: Return fabrics to default configuration.
  cisco.dcnm.dcnm_fabric:
    state: replaced
    config:
    -   FABRIC_NAME: VXLAN_Fabric
        FABRIC_TYPE: VXLAN_EVPN
        BGP_AS: 65000
        DEPLOY: false
    -   FABRIC_NAME: MSD_Fabric
        FABRIC_TYPE: VXLAN_EVPN_MSD
        DEPLOY: false
    -   FABRIC_NAME: LAN_Fabric
        FABRIC_TYPE: LAN_CLASSIC
        DEPLOY: false
  register: result
- debug:
    var: result

# Query the fabrics to get their current configurations.

- name: Query the fabrics.
  cisco.dcnm.dcnm_fabric:
    state: query
    config:
    -   FABRIC_NAME: VXLAN_Fabric
    -   FABRIC_NAME: MSD_Fabric
    -   FABRIC_NAME: LAN_Fabric
  register: result
- debug:
    var: result

# Delete the fabrics.

- name: Delete the fabrics.
  cisco.dcnm.dcnm_fabric:
    state: deleted
    config:
    -   FABRIC_NAME: VXLAN_Fabric
    -   FABRIC_NAME: MSD_Fabric
    -   FABRIC_NAME: LAN_Fabric
  register: result
- debug:
    var: result

# When skip_validation is False (the default), some error messages might be
# misleading.  For example, with the playbook below, the error message
# that follows should be interpreted as "ENABLE_PVLAN is mutually-exclusive
# to ENABLE_SGT and should be removed from the playbook if ENABLE_SGT is set
# to True."  In the NDFC GUI, if Security Groups is enabled, NDFC disables
# the ability to modify the PVLAN option.  Hence, even a valid value for
# ENABLE_PVLAN in the playbook will generate an error.

-   name: merge fabric MyFabric
    cisco.dcnm.dcnm_fabric:
        state: merged
        skip_validation: false
        config:
        -   FABRIC_NAME: MyFabric
            FABRIC_TYPE: VXLAN_EVPN
            BGP_AS: 65001
            ENABLE_SGT: true
            ENABLE_PVLAN: false

# Resulting error message (edited for brevity)
# "The following parameter(value) combination(s) are invalid and need to be reviewed: Fabric: f3, ENABLE_PVLAN(False) requires ENABLE_SGT != True."

```
